<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LYKN T-pop Photostrip</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');
        
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #1a1a1a;
            color: #fff;
        }
        
        .camera-container {
            position: relative;
            overflow: hidden;
            border-radius: 8px;
            background-color: #000;
        }
        
        .photo-slot {
            background-color: #222;
            border: 2px dashed #444;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .photo-slot img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .countdown {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 6rem;
            color: white;
            z-index: 10;
            opacity: 0;
        }
        
        .countdown.active {
            opacity: 1;
        }
        
        .flash {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: white;
            opacity: 0;
            z-index: 5;
        }
        
        .error-message {
            background-color: rgba(0,0,0,0.7);
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }
        
        .camera-controls {
            position: absolute;
            bottom: 10px;
            right: 10px;
            z-index: 20;
        }
        
        <div class="lykn-group-image">
          <img src="5ae8328b-423a-4290-afe6-f6b9c74370c6_TABLET_LANDSCAPE_LARGE_16_9.jpg" alt="LYKN Group" style="width: 100%; height: auto; display: block;">
        </div>
        }
        
        .photostrip-header {
            border-bottom: 1px solid #333;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        
        .band-photo-container {
            position: relative;
            width: 100%;
            height: 140px;
            overflow: hidden;
            border-radius: 4px;
            margin: 10px 0;
            background: linear-gradient(to right, #111, #333, #111);
        }
        
        .between-photos-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px 0;
            gap: 10px;
        }
    </style>
</head>
<body class="p-4">
    <div class="max-w-4xl mx-auto">
        <header class="text-center mb-6">
            <h1 class="text-3xl font-bold mb-2">LYKN UNLEASHED TOUR</h1>
            <p class="text-gray-400">Manila Photostrip</p>
        </header>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Camera Section -->
            <div>
                <div class="camera-container aspect-video mb-4 relative">
                    <video id="video" class="w-full h-full object-cover" autoplay playsinline></video>
                    <div id="cameraError" class="error-message absolute inset-0 flex items-center justify-center hidden">
                        <div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                            <p class="text-lg font-medium">Camera access required</p>
                            <p class="text-sm text-gray-400 mt-1">Please allow camera access in your browser settings</p>
                        </div>
                    </div>
                    <div class="camera-controls">
                        <button id="switchCameraBtn" class="bg-black bg-opacity-50 hover:bg-opacity-70 text-white p-2 rounded-full">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                        </button>
                    </div>
                    <div class="countdown" id="countdown">3</div>
                    <div class="flash" id="flash"></div>
                </div>
                
                <div class="flex gap-3 justify-center">
                    <button id="startBtn" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-md">
                        Start Photobooth
                    </button>
                    <button id="resetBtn" class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-md" disabled>
                        Reset
                    </button>
                </div>
                
                <!-- Between Photos Controls (initially hidden) -->
                <div id="betweenPhotosControls" class="between-photos-controls mt-3 hidden">
                    <button id="switchCameraBetweenBtn" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-md flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Switch Camera
                    </button>
                    <button id="continueBtn" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-md">
                        Continue
                    </button>
                </div>
                
                <div id="statusMessage" class="mt-3 text-center text-sm text-gray-400"></div>
            </div>
            
            <!-- Photostrip Section -->
            <div>
                <div class="bg-black p-4 rounded-md">
                    <div class="photostrip-header text-center mb-3">
                        <h2 class="text-xl font-bold">LYKN</h2>
                        <p class="text-xs text-gray-400 mb-2">UNLEASHED TOUR IN MANILA</p>
                        
                        <img src="TABLET_LANDSCAPE_LARGE_16_9.jpg" alt="Tablet Landscape Image" style="width:100%; height:auto;">
                        <div class="band-photo-container">
                            <svg viewBox="0 0 800 280" xmlns="http://www.w3.org/2000/svg" class="w-full h-full">
                                <!-- Background with gradient -->
                                <defs>
                                    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                        <stop offset="0%" stop-color="#000000" />
                                        <stop offset="100%" stop-color="#222222" />
                                    </linearGradient>
                                    <radialGradient id="spotlightGradient" cx="50%" cy="50%" r="70%" fx="50%" fy="50%">
                                        <stop offset="0%" stop-color="#ffffff" stop-opacity="0.2" />
                                        <stop offset="100%" stop-color="#000000" stop-opacity="0" />
                                    </radialGradient>
                                    <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
                                        <feGaussianBlur stdDeviation="5" result="blur" />
                                        <feComposite in="SourceGraphic" in2="blur" operator="over" />
                                    </filter>
                                </defs>
                                
                                <!-- Background -->
                                <rect x="0" y="0" width="800" height="280" fill="url(#bgGradient)" />
                                
                                <!-- Spotlight effect -->
                                <ellipse cx="400" cy="140" rx="400" ry="140" fill="url(#spotlightGradient)" />
                                
                                <img src="TABLET_LANDSCAPE_LARGE_16_9.jpg" alt="Tablet Landscape Image" style="width:100%; height:auto;">
                                
                                <!-- Member 1 - Left -->
                                <g transform="translate(160, 140)">
                                    <!-- Body with stylish outfit -->
                                    <rect x="-35" y="0" width="70" height="100" rx="5" fill="#111111" />
                                    
                                    <!-- Jacket -->
                                    <path d="M-35,0 L-35,80 L-25,80 L-25,0 Z" fill="#333333" />
                                    <path d="M35,0 L35,80 L25,80 L25,0 Z" fill="#333333" />
                                    
                                    <!-- Shirt details -->
                                    <rect x="-25" y="0" width="50" height="60" rx="2" fill="#222222" />
                                    <rect x="-20" y="10" width="40" height="5" fill="#444444" />
                                    <rect x="-20" y="20" width="40" height="5" fill="#444444" />
                                    
                                    <!-- Head -->
                                    <circle cx="0" cy="-30" r="30" fill="#e0c8b0" />
                                    
                                    <!-- Hair - Modern style -->
                                    <path d="M-30,-30 C-35,-50 -20,-70 0,-70 C20,-70 35,-50 30,-30 C25,-35 20,-40 0,-40 C-20,-40 -25,-35 -30,-30 Z" fill="#111111" />
                                    
                                    <!-- Face features -->
                                    <circle cx="-10" cy="-30" r="3" fill="#111111" />
                                    <circle cx="10" cy="-30" r="3" fill="#111111" />
                                    <path d="M-8,-15 C-4,-10 4,-10 8,-15" stroke="#111111" stroke-width="1.5" fill="none" />
                                    
                                    <!-- Pose - Arms crossed -->
                                    <rect x="-40" y="30" width="15" height="40" rx="5" fill="#111111" transform="rotate(-20, -40, 30)" />
                                    <rect x="25" y="30" width="15" height="40" rx="5" fill="#111111" transform="rotate(20, 25, 30)" />
                                </g>
                                
                                <!-- Member 2 - Center Left -->
                                <g transform="translate(280, 140)">
                                    <!-- Body with stylish outfit -->
                                    <rect x="-35" y="0" width="70" height="100" rx="5" fill="#111111" />
                                    
                                    <!-- Jacket with details -->
                                    <path d="M-35,0 L-35,80 L-25,80 L-25,0 Z" fill="#444444" />
                                    <path d="M35,0 L35,80 L25,80 L25,0 Z" fill="#444444" />
                                    
                                    <!-- Shirt details -->
                                    <rect x="-25" y="0" width="50" height="60" rx="2" fill="#222222" />
                                    <rect x="-20" y="15" width="40" height="3" fill="#666666" />
                                    <rect x="-20" y="25" width="40" height="3" fill="#666666" />
                                    <rect x="-20" y="35" width="40" height="3" fill="#666666" />
                                    
                                    <!-- Head -->
                                    <circle cx="0" cy="-30" r="30" fill="#e0c8b0" />
                                    
                                    <!-- Hair - Modern style with undercut -->
                                    <path d="M-30,-30 C-35,-50 -20,-70 0,-70 C20,-70 35,-50 30,-30" fill="#111111" />
                                    <path d="M-30,-30 L-20,-30 L-20,-40 L-10,-30 L0,-40 L10,-30 L20,-40 L20,-30 L30,-30" fill="#111111" />
                                    
                                    <!-- Face features -->
                                    <circle cx="-10" cy="-30" r="3" fill="#111111" />
                                    <circle cx="10" cy="-30" r="3" fill="#111111" />
                                    <path d="M-8,-15 C-4,-10 4,-10 8,-15" stroke="#111111" stroke-width="1.5" fill="none" />
                                    
                                    <!-- Pose - Hand on hip -->
                                    <path d="M35,40 C45,30 45,50 35,60" stroke="#111111" stroke-width="10" fill="none" />
                                </g>
                                
                                <!-- Member 3 - Center Right -->
                                <g transform="translate(520, 140)">
                                    <!-- Body with stylish outfit -->
                                    <rect x="-35" y="0" width="70" height="100" rx="5" fill="#111111" />
                                    
                                    <!-- Jacket with details -->
                                    <path d="M-35,0 L-35,80 L-25,80 L-25,0 Z" fill="#333333" />
                                    <path d="M35,0 L35,80 L25,80 L25,0 Z" fill="#333333" />
                                    
                                    <!-- Shirt details -->
                                    <rect x="-25" y="0" width="50" height="60" rx="2" fill="#222222" />
                                    <rect x="-20" y="10" width="40" height="5" fill="#444444" />
                                    <rect x="-20" y="20" width="40" height="5" fill="#444444" />
                                    <rect x="-20" y="30" width="40" height="5" fill="#444444" />
                                    
                                    <!-- Head -->
                                    <circle cx="0" cy="-30" r="30" fill="#e0c8b0" />
                                    
                                    <!-- Hair - Modern style with side part -->
                                    <path d="M-30,-30 C-35,-50 -20,-70 0,-70 C20,-70 35,-50 30,-30" fill="#111111" />
                                    <path d="M-10,-60 L10,-30 L30,-30" fill="#111111" />
                                    
                                    <!-- Face features -->
                                    <circle cx="-10" cy="-30" r="3" fill="#111111" />
                                    <circle cx="10" cy="-30" r="3" fill="#111111" />
                                    <path d="M-8,-15 C-4,-10 4,-10 8,-15" stroke="#111111" stroke-width="1.5" fill="none" />
                                    
                                    <!-- Pose - Hand gesture -->
                                    <path d="M-35,40 C-45,30 -45,50 -35,60" stroke="#111111" stroke-width="10" fill="none" />
                                </g>
                                
                                <!-- Member 4 - Right -->
                                <g transform="translate(640, 140)">
                                    <!-- Body with stylish outfit -->
                                    <rect x="-35" y="0" width="70" height="100" rx="5" fill="#111111" />
                                    
                                    <!-- Jacket -->
                                    <path d="M-35,0 L-35,80 L-25,80 L-25,0 Z" fill="#444444" />
                                    <path d="M35,0 L35,80 L25,80 L25,0 Z" fill="#444444" />
                                    
                                    <!-- Shirt details -->
                                    <rect x="-25" y="0" width="50" height="60" rx="2" fill="#222222" />
                                    <rect x="-20" y="15" width="40" height="3" fill="#666666" />
                                    <rect x="-20" y="25" width="40" height="3" fill="#666666" />
                                    
                                    <!-- Head -->
                                    <circle cx="0" cy="-30" r="30" fill="#e0c8b0" />
                                    
                                    <!-- Hair - Modern style with fade -->
                                    <path d="M-30,-30 C-35,-50 -20,-70 0,-70 C20,-70 35,-50 30,-30" fill="#111111" />
                                    <path d="M-30,-30 C-20,-40 20,-40 30,-30" fill="#111111" />
                                    
                                    <!-- Face features -->
                                    <circle cx="-10" cy="-30" r="3" fill="#111111" />
                                    <circle cx="10" cy="-30" r="3" fill="#111111" />
                                    <path d="M-8,-15 C-4,-10 4,-10 8,-15" stroke="#111111" stroke-width="1.5" fill="none" />
                                    
                                    <!-- Pose - Arms crossed -->
                                    <rect x="-40" y="30" width="15" height="40" rx="5" fill="#111111" transform="rotate(-20, -40, 30)" />
                                    <rect x="25" y="30" width="15" height="40" rx="5" fill="#111111" transform="rotate(20, 25, 30)" />
                                </g>
                                
                                <!-- Member 5 - Center -->
                                <g transform="translate(400, 140)">
                                    <!-- Body with stylish outfit -->
                                    <rect x="-40" y="0" width="80" height="100" rx="5" fill="#111111" />
                                    
                                    <!-- Jacket with details -->
                                    <path d="M-40,0 L-40,80 L-30,80 L-30,0 Z" fill="#333333" />
                                    <path d="M40,0 L40,80 L30,80 L30,0 Z" fill="#333333" />
                                    
                                    <!-- Shirt details -->
                                    <rect x="-30" y="0" width="60" height="60" rx="2" fill="#222222" />
                                    <rect x="-25" y="10" width="50" height="5" fill="#444444" />
                                    <rect x="-25" y="20" width="50" height="5" fill="#444444" />
                                    <rect x="-25" y="30" width="50" height="5" fill="#444444" />
                                    
                                    <!-- Head -->
                                    <circle cx="0" cy="-30" r="32" fill="#e0c8b0" />
                                    
                                    <!-- Hair - Modern style with volume -->
                                    <path d="M-32,-30 C-37,-55 -22,-75 0,-75 C22,-75 37,-55 32,-30" fill="#111111" />
                                    <path d="M-20,-70 L-10,-40 L0,-70 L10,-40 L20,-70" fill="#111111" />
                                    
                                    <!-- Face features -->
                                    <circle cx="-12" cy="-30" r="3" fill="#111111" />
                                    <circle cx="12" cy="-30" r="3" fill="#111111" />
                                    <path d="M-10,-15 C-5,-10 5,-10 10,-15" stroke="#111111" stroke-width="1.5" fill="none" />
                                    
                                    <!-- Microphone -->
                                    <rect x="-3" y="0" width="6" height="20" fill="#777777" />
                                    <circle cx="0" cy="0" r="8" fill="#999999" />
                                </g>
                                
                                <!-- Stage lighting effects -->
                                <circle cx="160" cy="40" r="5" fill="#ffffff" opacity="0.8">
                                    <animate attributeName="opacity" values="0.8;0.4;0.8" dur="1.5s" repeatCount="indefinite" />
                                </circle>
                                <circle cx="280" cy="40" r="5" fill="#ffffff" opacity="0.8">
                                    <animate attributeName="opacity" values="0.4;0.8;0.4" dur="1.7s" repeatCount="indefinite" />
                                </circle>
                                <circle cx="400" cy="40" r="5" fill="#ffffff" opacity="0.8">
                                    <animate attributeName="opacity" values="0.6;0.9;0.6" dur="1.2s" repeatCount="indefinite" />
                                </circle>
                                <circle cx="520" cy="40" r="5" fill="#ffffff" opacity="0.8">
                                    <animate attributeName="opacity" values="0.8;0.5;0.8" dur="1.9s" repeatCount="indefinite" />
                                </circle>
                                <circle cx="640" cy="40" r="5" fill="#ffffff" opacity="0.8">
                                    <animate attributeName="opacity" values="0.5;0.8;0.5" dur="1.4s" repeatCount="indefinite" />
                                </circle>
                                
                                <!-- Light beams -->
                                <polygon points="160,40 130,280 190,280" fill="#ffffff" opacity="0.05" />
                                <polygon points="280,40 250,280 310,280" fill="#ffffff" opacity="0.05" />
                                <polygon points="400,40 370,280 430,280" fill="#ffffff" opacity="0.05" />
                                <polygon points="520,40 490,280 550,280" fill="#ffffff" opacity="0.05" />
                                <polygon points="640,40 610,280 670,280" fill="#ffffff" opacity="0.05" />
                                
                                <!-- LYKN logo text -->
                                <text x="400" y="250" font-family="Montserrat, sans-serif" font-size="36" font-weight="bold" fill="white" text-anchor="middle" filter="url(#glow)">LYKN</text>
                                <text x="400" y="270" font-family="Montserrat, sans-serif" font-size="14" font-weight="bold" fill="white" text-anchor="middle">UNLEASHED TOUR</text>
                            </svg>
                        </div>
                    </div>
                    
                    <div id="photoStripContainer" class="flex flex-col gap-3 mb-3">
                        <!-- Photo slots will be generated here -->
                    </div>
                    
                    <div class="text-center text-xs text-gray-500">
                        <p>MEMORIES FROM THE CONCERT</p>
                    </div>
                </div>
                
                <div class="mt-4 text-center">
                    <button id="downloadBtn" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-md" disabled>
                        Download Photostrip
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <canvas id="canvas" class="hidden"></canvas>
    <canvas id="photoStripCanvas" class="hidden"></canvas>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM elements
            const video = document.getElementById('video');
            const canvas = document.getElementById('canvas');
            const photoStripCanvas = document.getElementById('photoStripCanvas');
            const photoStripContainer = document.getElementById('photoStripContainer');
            const startBtn = document.getElementById('startBtn');
            const resetBtn = document.getElementById('resetBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const countdown = document.getElementById('countdown');
            const flash = document.getElementById('flash');
            const cameraError = document.getElementById('cameraError');
            const statusMessage = document.getElementById('statusMessage');
            const switchCameraBtn = document.getElementById('switchCameraBtn');
            const betweenPhotosControls = document.getElementById('betweenPhotosControls');
            const switchCameraBetweenBtn = document.getElementById('switchCameraBetweenBtn');
            const continueBtn = document.getElementById('continueBtn');
            
            // Variables
            let stream = null;
            let photosTaken = 0;
            let photoSlots = [];
            let capturedPhotos = [];
            let isCapturing = false;
            let isPaused = false;
            const photoCount = 3;
            let currentFacingMode = 'user'; // Start with front camera
            
            // Initialize camera with better error handling
            async function initCamera(facingMode = 'user') {
                // Stop any existing stream
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                
                try {
                    statusMessage.textContent = "Requesting camera access...";
                    currentFacingMode = facingMode;
                    
                    stream = await navigator.mediaDevices.getUserMedia({ 
                        video: { 
                            facingMode: facingMode,
                            width: { ideal: 1280 },
                            height: { ideal: 720 }
                        }, 
                        audio: false 
                    });
                    
                    video.srcObject = stream;
                    startBtn.disabled = false;
                    statusMessage.textContent = `Camera ready (${facingMode === 'user' ? 'front' : 'back'})! Click 'Start Photobooth' to begin.`;
                    cameraError.classList.add('hidden');
                    switchCameraBtn.disabled = false;
                    
                } catch (err) {
                    console.error('Camera error:', err);
                    cameraError.classList.remove('hidden');
                    statusMessage.textContent = `Error accessing ${facingMode === 'user' ? 'front' : 'back'} camera.`;
                    
                    // If one camera fails, try the other one
                    if (facingMode === 'user') {
                        statusMessage.textContent = "Front camera not available. Trying back camera...";
                        setTimeout(() => {
                            initCamera('environment');
                        }, 1000);
                    } else if (facingMode === 'environment') {
                        statusMessage.textContent = "Back camera not available. Trying front camera...";
                        setTimeout(() => {
                            initCamera('user');
                        }, 1000);
                    } else {
                        startBtn.disabled = true;
                        switchCameraBtn.disabled = true;
                    }
                }
            }
            
            // Switch camera function
            async function switchCamera() {
                const newFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
                switchCameraBtn.disabled = true;
                switchCameraBetweenBtn.disabled = true;
                statusMessage.textContent = `Switching to ${newFacingMode === 'user' ? 'front' : 'back'} camera...`;
                
                try {
                    await initCamera(newFacingMode);
                    switchCameraBetweenBtn.disabled = false;
                } catch (err) {
                    console.error('Error switching camera:', err);
                    statusMessage.textContent = `Failed to switch camera. Using ${currentFacingMode === 'user' ? 'front' : 'back'} camera.`;
                    switchCameraBtn.disabled = false;
                    switchCameraBetweenBtn.disabled = false;
                }
            }
            
            // Create photo slots with dynamic aspect ratio
            function createPhotoSlots() {
                photoStripContainer.innerHTML = '';
                photoSlots = [];
                capturedPhotos = [];
                
                for (let i = 0; i < photoCount; i++) {
                    const slot = document.createElement('div');
                    slot.className = 'photo-slot mb-3';
                    slot.style.height = '200px'; // Default height until we know the actual aspect ratio
                    slot.innerHTML = `<span class="text-gray-500">${i + 1}</span>`;
                    photoStripContainer.appendChild(slot);
                    photoSlots.push(slot);
                }
            }
            
            // Take a photo with error handling
            function takePhoto() {
                return new Promise((resolve, reject) => {
                    try {
                        // Flash effect
                        flash.style.opacity = '0.8';
                        setTimeout(() => {
                            flash.style.opacity = '0';
                        }, 200);
                        
                        // Set canvas dimensions to match video dimensions
                        canvas.width = video.videoWidth || 640;
                        canvas.height = video.videoHeight || 480;
                        
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                        
                        const imgData = canvas.toDataURL('image/jpeg');
                        
                        // Add to captured photos
                        capturedPhotos.push({
                            data: imgData,
                            width: canvas.width,
                            height: canvas.height
                        });
                        
                        // Update photo slot with proper aspect ratio
                        const aspectRatio = canvas.width / canvas.height;
                        photoSlots[photosTaken].style.aspectRatio = aspectRatio;
                        
                        const img = document.createElement('img');
                        img.src = imgData;
                        photoSlots[photosTaken].innerHTML = '';
                        photoSlots[photosTaken].appendChild(img);
                        
                        photosTaken++;
                        resolve();
                    } catch (err) {
                        console.error('Error taking photo:', err);
                        statusMessage.textContent = "Error capturing photo. Please try again.";
                        reject(err);
                    }
                });
            }
            
            // Start countdown
            function startCountdown(seconds) {
                return new Promise((resolve) => {
                    countdown.textContent = seconds;
                    countdown.classList.add('active');
                    
                    const interval = setInterval(() => {
                        seconds--;
                        countdown.textContent = seconds;
                        
                        if (seconds <= 0) {
                            clearInterval(interval);
                            countdown.classList.remove('active');
                            resolve();
                        }
                    }, 1000);
                });
            }
            
            // Show between photos controls
            function showBetweenPhotosControls() {
                return new Promise((resolve) => {
                    betweenPhotosControls.classList.remove('hidden');
                    startBtn.classList.add('hidden');
                    resetBtn.classList.add('hidden');
                    isPaused = true;
                    
                    // Set up event listeners for one-time use
                    const onSwitchCamera = async () => {
                        await switchCamera();
                    };
                    
                    const onContinue = () => {
                        betweenPhotosControls.classList.add('hidden');
                        startBtn.classList.remove('hidden');
                        resetBtn.classList.remove('hidden');
                        isPaused = false;
                        
                        // Remove event listeners
                        switchCameraBetweenBtn.removeEventListener('click', onSwitchCamera);
                        continueBtn.removeEventListener('click', onContinue);
                        
                        resolve();
                    };
                    
                    switchCameraBetweenBtn.addEventListener('click', onSwitchCamera);
                    continueBtn.addEventListener('click', onContinue);
                    
                    statusMessage.textContent = "Ready for next photo. Switch camera or continue.";
                });
            }
            
            // Start photobooth process
            async function startPhotobooth() {
                if (isCapturing) return;
                
                try {
                    isCapturing = true;
                    startBtn.disabled = true;
                    switchCameraBtn.disabled = true;
                    statusMessage.textContent = "Starting photobooth...";
                    
                    createPhotoSlots();
                    photosTaken = 0;
                    
                    for (let i = 0; i < photoCount; i++) {
                        statusMessage.textContent = `Taking photo ${i+1} of ${photoCount}...`;
                        await startCountdown(3);
                        await takePhoto();
                        
                        // Show between photos controls if not the last photo
                        if (i < photoCount - 1) {
                            await showBetweenPhotosControls();
                        }
                    }
                    
                    resetBtn.disabled = false;
                    downloadBtn.disabled = false;
                    switchCameraBtn.disabled = false;
                    statusMessage.textContent = "All photos taken! You can download your photostrip.";
                } catch (err) {
                    console.error('Photobooth error:', err);
                    statusMessage.textContent = "An error occurred. Please try again.";
                    switchCameraBtn.disabled = false;
                } finally {
                    isCapturing = false;
                }
            }
            
            // Reset photobooth
            function resetPhotobooth() {
                photosTaken = 0;
                capturedPhotos = [];
                createPhotoSlots();
                
                startBtn.disabled = false;
                resetBtn.disabled = true;
                downloadBtn.disabled = true;
                statusMessage.textContent = "Reset complete. Ready to take new photos.";
            }
            
            // Draw LYKN band image on canvas
            function drawLYKNBandImage(ctx, x, y, width, height) {
                // Background gradient
                const bgGradient = ctx.createLinearGradient(x, y, x + width, y + height);
                bgGradient.addColorStop(0, '#000000');
                bgGradient.addColorStop(1, '#222222');
                ctx.fillStyle = bgGradient;
                ctx.fillRect(x, y, width, height);
                
                // Spotlight effect
                const spotlightGradient = ctx.createRadialGradient(
                    x + width/2, y + height/2, 0,
                    x + width/2, y + height/2, width/2
                );
                spotlightGradient.addColorStop(0, 'rgba(255, 255, 255, 0.2)');
                spotlightGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
                ctx.fillStyle = spotlightGradient;
                ctx.beginPath();
                ctx.ellipse(x + width/2, y + height/2, width/2, height/3, 0, 0, Math.PI * 2);
                ctx.fill();
                
                // Light beams
                ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
                for (let i = 0; i < 5; i++) {
                    const centerX = x + (width / 6) * (i + 1);
                    ctx.beginPath();
                    ctx.moveTo(centerX, y + 40);
                    ctx.lineTo(centerX - 30, y + height);
                    ctx.lineTo(centerX + 30, y + height);
                    ctx.closePath();
                    ctx.fill();
                }
                
                // Draw band members
                function drawBandMember(centerX, centerY, scale, isCenter = false) {
                    const s = scale;
                    
                    // Body with stylish outfit
                    ctx.fillStyle = '#111111';
                    ctx.beginPath();
                    ctx.roundRect(centerX - 35*s, centerY, 70*s, 100*s, 5*s);
                    ctx.fill();
                    
                    // Jacket details
                    ctx.fillStyle = isCenter ? '#333333' : '#444444';
                    ctx.fillRect(centerX - 35*s, centerY, 10*s, 80*s);
                    ctx.fillRect(centerX + 25*s, centerY, 10*s, 80*s);
                    
                    // Shirt details
                    ctx.fillStyle = '#222222';
                    ctx.beginPath();
                    ctx.roundRect(centerX - 25*s, centerY, 50*s, 60*s, 2*s);
                    ctx.fill();
                    
                    // Shirt lines
                    ctx.fillStyle = '#444444';
                    ctx.fillRect(centerX - 20*s, centerY + 10*s, 40*s, 5*s);
                    ctx.fillRect(centerX - 20*s, centerY + 20*s, 40*s, 5*s);
                    if (!isCenter) {
                        ctx.fillRect(centerX - 20*s, centerY + 30*s, 40*s, 5*s);
                    }
                    
                    // Head
                    ctx.fillStyle = '#e0c8b0';
                    ctx.beginPath();
                    ctx.arc(centerX, centerY - 30*s, 30*s, 0, Math.PI * 2);
                    ctx.fill();
                    
                    // Hair - Modern style
                    ctx.fillStyle = '#111111';
                    ctx.beginPath();
                    ctx.moveTo(centerX - 30*s, centerY - 30*s);
                    ctx.bezierCurveTo(
                        centerX - 35*s, centerY - 50*s,
                        centerX - 20*s, centerY - 70*s,
                        centerX, centerY - 70*s
                    );
                    ctx.bezierCurveTo(
                        centerX + 20*s, centerY - 70*s,
                        centerX + 35*s, centerY - 50*s,
                        centerX + 30*s, centerY - 30*s
                    );
                    ctx.closePath();
                    ctx.fill();
                    
                    // Face features
                    ctx.fillStyle = '#111111';
                    ctx.beginPath();
                    ctx.arc(centerX - 10*s, centerY - 30*s, 3*s, 0, Math.PI * 2);
                    ctx.fill();
                    ctx.beginPath();
                    ctx.arc(centerX + 10*s, centerY - 30*s, 3*s, 0, Math.PI * 2);
                    ctx.fill();
                    
                    // Smile
                    ctx.strokeStyle = '#111111';
                    ctx.lineWidth = 1.5*s;
                    ctx.beginPath();
                    ctx.moveTo(centerX - 8*s, centerY - 15*s);
                    ctx.bezierCurveTo(
                        centerX - 4*s, centerY - 10*s,
                        centerX + 4*s, centerY - 10*s,
                        centerX + 8*s, centerY - 15*s
                    );
                    ctx.stroke();
                    
                    // Specific member details
                    if (isCenter) {
                        // Microphone for center member
                        ctx.fillStyle = '#777777';
                        ctx.fillRect(centerX - 3*s, centerY, 6*s, 20*s);
                        ctx.fillStyle = '#999999';
                        ctx.beginPath();
                        ctx.arc(centerX, centerY, 8*s, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }
                
                // Draw the band members
                drawBandMember(x + width * 0.2, y + height * 0.5, 0.9);
                drawBandMember(x + width * 0.35, y + height * 0.5, 0.9);
                drawBandMember(x + width * 0.5, y + height * 0.5, 1, true); // Center member
                drawBandMember(x + width * 0.65, y + height * 0.5, 0.9);
                drawBandMember(x + width * 0.8, y + height * 0.5, 0.9);
                
                // Stage lights
                function drawStageLight(centerX, opacity) {
                    ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;
                    ctx.beginPath();
                    ctx.arc(centerX, y + 40, 5, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                drawStageLight(x + width * 0.2, 0.8);
                drawStageLight(x + width * 0.35, 0.6);
                drawStageLight(x + width * 0.5, 0.9);
                drawStageLight(x + width * 0.65, 0.7);
                drawStageLight(x + width * 0.8, 0.8);
                
                // LYKN text overlay
                ctx.fillStyle = '#ffffff';
                ctx.font = 'bold 36px Montserrat, sans-serif';
                ctx.textAlign = 'center';
                ctx.fillText('LYKN', x + width / 2, y + height - 30);
                
                ctx.font = 'bold 14px Montserrat, sans-serif';
                ctx.fillText('UNLEASHED TOUR', x + width / 2, y + height - 10);
            }
            
            // Generate and download photostrip
            function downloadPhotostrip() {
                if (capturedPhotos.length === 0) {
                    statusMessage.textContent = "No photos to download.";
                    return;
                }
                
                try {
                    statusMessage.textContent = "Generating photostrip...";
                    
                    // Calculate dimensions for the photostrip
                    const stripWidth = 800;
                    const padding = 20;
                    const headerHeight = 220; // For LYKN band image and title
                    const footerHeight = 60;
                    const photoPadding = 20; // Space between photos
                    
                    // Calculate total height based on actual photo dimensions
                    let totalPhotoHeight = 0;
                    capturedPhotos.forEach(photo => {
                        const aspectRatio = photo.width / photo.height;
                        const photoWidth = stripWidth - (padding * 2);
                        const photoHeight = photoWidth / aspectRatio;
                        totalPhotoHeight += photoHeight + photoPadding;
                    });
                    
                    // Subtract the last padding and add header/footer
                    const totalHeight = headerHeight + totalPhotoHeight - photoPadding + footerHeight;
                    
                    photoStripCanvas.width = stripWidth;
                    photoStripCanvas.height = totalHeight;
                    
                    const ctx = photoStripCanvas.getContext('2d');
                    
                    // Fill background
                    ctx.fillStyle = '#000000';
                    ctx.fillRect(0, 0, photoStripCanvas.width, photoStripCanvas.height);
                    
                    // Draw header
                    ctx.fillStyle = '#ffffff';
                    ctx.font = 'bold 36px Montserrat, sans-serif';
                    ctx.textAlign = 'center';
                    ctx.fillText('LYKN', stripWidth / 2, 40);
                    
                    ctx.font = 'bold 16px Montserrat, sans-serif';
                    ctx.fillText('UNLEASHED TOUR IN MANILA', stripWidth / 2, 70);
                    
                    // Draw LYKN band image
                    drawLYKNBandImage(ctx, 20, 80, stripWidth - 40, 120);
                    
                    // Draw divider
                    ctx.strokeStyle = '#333333';
                    ctx.lineWidth = 2;
                    ctx.beginPath();
                    ctx.moveTo(20, headerHeight - 10);
                    ctx.lineTo(stripWidth - 20, headerHeight - 10);
                    ctx.stroke();
                    
                    // Draw photos
                    let yPos = headerHeight;
                    
                    const drawNextPhoto = (index) => {
                        if (index >= capturedPhotos.length) {
                            // All photos drawn, add footer and download
                            ctx.fillStyle = '#aaaaaa';
                            ctx.font = '14px Montserrat, sans-serif';
                            ctx.fillText('MEMORIES FROM THE CONCERT', stripWidth / 2, photoStripCanvas.height - 30);
                            
                            // Create download link
                            const link = document.createElement('a');
                            link.download = 'lykn_photostrip.jpg';
                            link.href = photoStripCanvas.toDataURL('image/jpeg', 0.8);
                            link.click();
                            
                            statusMessage.textContent = "Photostrip downloaded!";
                            return;
                        }
                        
                        const img = new Image();
                        img.onload = () => {
                            // Calculate dimensions for this specific photo
                            const aspectRatio = capturedPhotos[index].width / capturedPhotos[index].height;
                            const photoWidth = stripWidth - (padding * 2);
                            const photoHeight = photoWidth / aspectRatio;
                            
                            // Draw photo background
                            ctx.fillStyle = '#222';
                            ctx.fillRect(padding, yPos, photoWidth, photoHeight);
                            
                            // Draw the image maintaining aspect ratio
                            ctx.drawImage(img, padding, yPos, photoWidth, photoHeight);
                            
                            // Add border
                            ctx.strokeStyle = '#444';
                            ctx.lineWidth = 2;
                            ctx.strokeRect(padding, yPos, photoWidth, photoHeight);
                            
                            // Update position for next photo
                            yPos += photoHeight + photoPadding;
                            
                            // Process next photo
                            drawNextPhoto(index + 1);
                        };
                        
                        img.onerror = () => {
                            console.error('Error loading image:', index);
                            statusMessage.textContent = "Error creating photostrip. Please try again.";
                        };
                        
                        img.src = capturedPhotos[index].data;
                    };
                    
                    // Start drawing photos
                    drawNextPhoto(0);
                    
                } catch (err) {
                    console.error('Download error:', err);
                    statusMessage.textContent = "Error generating photostrip.";
                }
            }
            
            // Event listeners
            startBtn.addEventListener('click', startPhotobooth);
            resetBtn.addEventListener('click', resetPhotobooth);
            downloadBtn.addEventListener('click', downloadPhotostrip);
            switchCameraBtn.addEventListener('click', switchCamera);
            
            // Initialize
            createPhotoSlots();
            
            // Check if getUserMedia is supported
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                cameraError.classList.remove('hidden');
                statusMessage.textContent = "Camera not supported in this browser.";
                startBtn.disabled = true;
                switchCameraBtn.disabled = true;
            } else {
                initCamera('user'); // Start with front camera by default
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'964a7544a1084edf',t:'MTc1MzQzMzkzMy4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
